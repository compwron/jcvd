#!/usr/bin/env ruby

require 'erb'
require 'json'
require 'logger'
require 'trollop'

opts = Trollop::options do
  banner <<-EOS
usage: jcvd [OPTIONS...]
  EOS
  opt :call, "Call some bad guys up. You know: on their phones."
  opt :say, "The URL to the twiml you want eval'd during the call", 
    :default => "http://bit.ly/tw-timesheets"

  opt :sms, "Send some fools a message."
  opt :message, "The erb file to eval as the SMS message body",
    :default => File.join(File.dirname(__FILE__), "sms.body.erb")

  opt :email, "Drop the people's elbow on some peep's inboxes."
  opt :subject, "The erb file to eval as the email subject",
    :default => File.join(File.dirname(__FILE__), "email.subject.erb")
  opt :body, "The erb file to eval as the email body",
    :default => File.join(File.dirname(__FILE__), "email.body.erb")
  
  opt :debug, "There's never enough time. Never enough for what? To satisfy a [developer who wants to see the logs]"
end

Mechanize::log = Logger.new($stderr) if opts[:debug]

def sms(badguy, message)
  require './sms'

  template = ERB.new(File.new(message).read)
  body = template.result(binding)

  mobile = badguy["mobile"] || ""
  sms = ThoughtWorks::SMS.new(ENV["SMSUSER"], ENV["SMSPASS"])
  if mobile.empty?
    $stderr.puts "Unable to sms #{badguy["name"]}. No mobile number."
  else
    sms.send(mobile, body)
  end
end

def call(badguy, say)
  require './phone'

  mobile = badguy["mobile"] || ""
  phone = ThoughtWorks::Phone.new(ENV["TWILIO_SID"], ENV["TWILIO_AUTH"])

  if mobile.empty?
    $stderr.puts "Unable to call #{badguy["name"]}. No mobile number."
  else
    phone.call(mobile, say)
  end
end

def email(badguy, subject, body)
  require 'pony'

  template = ERB.new(File.new(subject).read)
  subject = template.result(binding)

  template = ERB.new(File.new(body).read)
  body = template.result(binding)

  Pony.mail(:to => badguy["email"], :via => :smtp, :via_options => {
    :address => 'smtp.gmail.com',
    :port => '587',
    :enable_starttls_auto => true,
    :user_name => ENV["TWUSER"],
    :password => ENV["TWPASS"],
    :authentication => :plain,
    :domain => "HELO",
  },
  :subject => subject, :body => body)
end

actions = opts.select { |k, v| v && [:sms, :call, :email].include?(k) }
gerunds = actions.keys.collect { |a| "#{a}ing" }
if gerunds.size > 1
  sentence = gerunds[0..-2].join(", ").capitalize + " and " + gerunds[-1]
else
  sentence = gerunds.first.capitalize
end

ARGF.each do |timecode|
  badguy = JSON.parse(timecode)

  puts "#{sentence} #{badguy["name"]}"

  sms(badguy, opts[:message]) if opts[:sms]
  call(badguy, opts[:say]) if opts[:call]
  email(badguy, opts[:subject], opts[:body]) if opts[:email]
end
