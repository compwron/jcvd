#!/usr/bin/env ruby

require 'json'
require 'trollop'
require 'erb'

opts = Trollop::options do
  banner <<-EOS
usage: jcvd [OPTIONS...]
  EOS
  opt :call, "Call some bad guys up. You know: on their phones."
  opt :sms, "Send some fools a message."
  opt :email, "Drop the people's elbow on some peep's inboxes."
end

def sms(badguy)
  require './sms'

  template = ERB.new(File.new("sms.body.erb").read)
  body = template.result(binding)

  mobile = badguy["mobile"] || ""
  sms = ThoughtWorks::SMS.new(ENV["SMSUSER"], ENV["SMSPASS"])
  sms.send(mobile, body)
end

def call(badguy)
  require './phone'

  mobile = badguy["mobile"] || ""
  phone = ThoughtWorks::Phone.new(ENV["TWILIO_SID"], ENV["TWILIO_AUTH"])
  phone.call(mobile) unless mobile.empty?
end

def email(badguy)
  require 'pony'

  template = ERB.new(File.new("email.subject.erb").read)
  subject = template.result(binding)

  template = ERB.new(File.new("email.body.erb").read)
  body = template.result(binding)

  Pony.mail(:to => badguy["email"], :via => :smtp, :via_options => {
    :address => 'smtp.gmail.com',
    :port => '587',
    :enable_starttls_auto => true,
    :user_name => ENV["TWUSER"],
    :password => ENV["TWPASS"],
    :authentication => :plain,
    :domain => "HELO",
  },
  :subject => subject, :body => body)
end

ARGF.each do |timecode|
  badguy = JSON.parse(timecode)

  sms(badguy) if opts[:sms]
  call(badguy) if opts[:call]
  email(badguy) if opts[:email]
end
