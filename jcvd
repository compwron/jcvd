#!/usr/bin/env ruby

require 'erb'
require 'json'
require 'logger'
require 'trollop'
require './config_helper'

opts = Trollop::options do
  banner <<-EOS
usage: jcvd [OPTIONS...]
  EOS
  opt :call, "Call some bad guys up. You know: on their phones."
  opt :say, "The URL to the twiml you want eval'd during the call", 
    :default => "http://bit.ly/tw-timesheets"

  opt :sms, "Send some fools a message."
  opt :message, "The erb file to eval as the SMS message body",
    :default => File.join(File.dirname(__FILE__), "sms.body.erb")

  opt :email, "Drop the people's elbow on some peep's inboxes."
  opt :subject, "The erb file to eval as the email subject",
    :default => File.join(File.dirname(__FILE__), "email.subject.erb")
  opt :body, "The erb file to eval as the email body",
    :default => File.join(File.dirname(__FILE__), "email.body.erb")

  opt :debug, "There's never enough time. Never enough for what? To satisfy a [developer who wants to see the logs]"
end

Mechanize::log = Logger.new($stderr) if opts[:debug]

def deadline 
  today = Time.now
  days_until_monday = (8 - today.wday) % 7
  due_date = Time.at(today.to_i + days_until_monday * 86400)
  Time.local(due_date.year, due_date.month, due_date.day, 18, 0)
end

def hours_before_late
  (deadline - Time.now).to_i / 3600
end

def sms(badguy, message)
  APP_CONFIG['twilio_sms'] == true ? (require './twilio_sms') : (require './au_sms')

  template = ERB.new(File.new(message).read)
  body = template.result(binding)

  mobile = badguy["mobile"] || ""
  sms = ThoughtWorks::SMS.new(APP_CONFIG['twilio_sid'], APP_CONFIG['twilio_auth'])
  if mobile.empty?
    $stderr.puts "Unable to sms #{badguy["name"]}. No mobile number."
  else
    sms.send(mobile, body)
  end
end

def call(badguy, say)
  require './phone'

  mobile = badguy["mobile"] || ""
  phone = ThoughtWorks::Phone.new(APP_CONFIG['twilio_sid'], APP_CONFIG['twilio_auth'])

  if mobile.empty?
    $stderr.puts "Unable to call #{badguy["name"]}. No mobile number."
  else
    phone.call(mobile, say)
  end
end

def email(badguy, subject, body)
  require 'pony'

  template = ERB.new(File.new(subject).read)
  subject = template.result(binding)

  template = ERB.new(File.new(body).read)
  body = template.result(binding)

  if badguy["email"].empty?
    $stderr.puts "Unable to email #{badguy["name"]}. No email address."
  else
      Pony.mail(:to => badguy["email"], :via => :smtp, :via_options => {
        :address => 'smtp.gmail.com',
        :port => APP_CONFIG['smtp_port'],
        :enable_starttls_auto => true,
        :user_name => "#{APP_CONFIG['twuser']}@thoughtworks.com",
        :password => APP_CONFIG['twpass'],
        :authentication => :plain,
        :domain => "HELO",
      },
      :subject => subject.strip, :body => body)
  end
end

actions = opts.select { |k, v| v && [:sms, :call, :email].include?(k) }
unless actions.empty?
  gerunds = actions.keys.collect { |a| "#{a}ing" }
  if gerunds.size > 1
    sentence = gerunds[0..-2].join(", ").capitalize + " and " + gerunds[-1]
  else
    sentence = gerunds.first.capitalize
  end

  ARGF.each do |timecode|
    badguy = JSON.parse(timecode)

    puts "#{sentence} #{badguy["name"]}"

    sms(badguy, opts[:message]) if opts[:sms]
    call(badguy, opts[:say]) if opts[:call]
    email(badguy, opts[:subject], opts[:body]) if opts[:email]
  end
end
